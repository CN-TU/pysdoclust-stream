# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SDOclustream
else:
    import _SDOclustream

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Distance32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register Distance32 in _SDOclustream:
_SDOclustream.Distance32_swigregister(Distance32)

class Distance64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register Distance64 in _SDOclustream:
_SDOclustream.Distance64_swigregister(Distance64)

class EuclideanDist32(Distance32):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SDOclustream.EuclideanDist32_swiginit(self, _SDOclustream.new_EuclideanDist32())
    __swig_destroy__ = _SDOclustream.delete_EuclideanDist32

# Register EuclideanDist32 in _SDOclustream:
_SDOclustream.EuclideanDist32_swigregister(EuclideanDist32)

class EuclideanDist64(Distance64):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SDOclustream.EuclideanDist64_swiginit(self, _SDOclustream.new_EuclideanDist64())
    __swig_destroy__ = _SDOclustream.delete_EuclideanDist64

# Register EuclideanDist64 in _SDOclustream:
_SDOclustream.EuclideanDist64_swigregister(EuclideanDist64)

class ManhattanDist32(Distance32):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SDOclustream.ManhattanDist32_swiginit(self, _SDOclustream.new_ManhattanDist32())
    __swig_destroy__ = _SDOclustream.delete_ManhattanDist32

# Register ManhattanDist32 in _SDOclustream:
_SDOclustream.ManhattanDist32_swigregister(ManhattanDist32)

class ManhattanDist64(Distance64):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SDOclustream.ManhattanDist64_swiginit(self, _SDOclustream.new_ManhattanDist64())
    __swig_destroy__ = _SDOclustream.delete_ManhattanDist64

# Register ManhattanDist64 in _SDOclustream:
_SDOclustream.ManhattanDist64_swigregister(ManhattanDist64)

class ChebyshevDist32(Distance32):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SDOclustream.ChebyshevDist32_swiginit(self, _SDOclustream.new_ChebyshevDist32())
    __swig_destroy__ = _SDOclustream.delete_ChebyshevDist32

# Register ChebyshevDist32 in _SDOclustream:
_SDOclustream.ChebyshevDist32_swigregister(ChebyshevDist32)

class ChebyshevDist64(Distance64):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SDOclustream.ChebyshevDist64_swiginit(self, _SDOclustream.new_ChebyshevDist64())
    __swig_destroy__ = _SDOclustream.delete_ChebyshevDist64

# Register ChebyshevDist64 in _SDOclustream:
_SDOclustream.ChebyshevDist64_swigregister(ChebyshevDist64)

class MinkowskiDist32(Distance32):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        _SDOclustream.MinkowskiDist32_swiginit(self, _SDOclustream.new_MinkowskiDist32(p))
    __swig_destroy__ = _SDOclustream.delete_MinkowskiDist32

# Register MinkowskiDist32 in _SDOclustream:
_SDOclustream.MinkowskiDist32_swigregister(MinkowskiDist32)

class MinkowskiDist64(Distance64):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        _SDOclustream.MinkowskiDist64_swiginit(self, _SDOclustream.new_MinkowskiDist64(p))
    __swig_destroy__ = _SDOclustream.delete_MinkowskiDist64

# Register MinkowskiDist64 in _SDOclustream:
_SDOclustream.MinkowskiDist64_swigregister(MinkowskiDist64)

class SDOclustream32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, observer_cnt, T, idle_observers, neighbour_cnt, chi_min, chi_prop, zeta, e, freq_bins, max_freq, outlier_threshold, outlier_handling, rel_outlier_score, perturb, random_sampling, input_buffer, distance, seed):
        _SDOclustream.SDOclustream32_swiginit(self, _SDOclustream.new_SDOclustream32(observer_cnt, T, idle_observers, neighbour_cnt, chi_min, chi_prop, zeta, e, freq_bins, max_freq, outlier_threshold, outlier_handling, rel_outlier_score, perturb, random_sampling, input_buffer, distance, seed))

    def fit(self, data, times):
        return _SDOclustream.SDOclustream32_fit(self, data, times)

    def fit_predict(self, data, labels, scores, times):
        return _SDOclustream.SDOclustream32_fit_predict(self, data, labels, scores, times)

    def observer_count(self):
        return _SDOclustream.SDOclustream32_observer_count(self)

    def get_observers(self, data, labels, observations, av_observations, time):
        return _SDOclustream.SDOclustream32_get_observers(self, data, labels, observations, av_observations, time)
    __swig_destroy__ = _SDOclustream.delete_SDOclustream32

# Register SDOclustream32 in _SDOclustream:
_SDOclustream.SDOclustream32_swigregister(SDOclustream32)

class SDOclustream64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, observer_cnt, T, idle_observers, neighbour_cnt, chi_min, chi_prop, zeta, e, freq_bins, max_freq, outlier_threshold, outlier_handling, rel_outlier_score, perturb, random_sampling, input_buffer, distance, seed):
        _SDOclustream.SDOclustream64_swiginit(self, _SDOclustream.new_SDOclustream64(observer_cnt, T, idle_observers, neighbour_cnt, chi_min, chi_prop, zeta, e, freq_bins, max_freq, outlier_threshold, outlier_handling, rel_outlier_score, perturb, random_sampling, input_buffer, distance, seed))

    def fit(self, data, times):
        return _SDOclustream.SDOclustream64_fit(self, data, times)

    def fit_predict(self, data, labels, scores, times):
        return _SDOclustream.SDOclustream64_fit_predict(self, data, labels, scores, times)

    def observer_count(self):
        return _SDOclustream.SDOclustream64_observer_count(self)

    def get_observers(self, data, labels, observations, av_observations, time):
        return _SDOclustream.SDOclustream64_get_observers(self, data, labels, observations, av_observations, time)
    __swig_destroy__ = _SDOclustream.delete_SDOclustream64

# Register SDOclustream64 in _SDOclustream:
_SDOclustream.SDOclustream64_swigregister(SDOclustream64)

class tpSDOclustream32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, observer_cnt, T, idle_observers, neighbour_cnt, chi_min, chi_prop, zeta, e, freq_bins, max_freq, outlier_threshold, outlier_handling, rel_outlier_score, perturb, random_sampling, input_buffer, distance, seed):
        _SDOclustream.tpSDOclustream32_swiginit(self, _SDOclustream.new_tpSDOclustream32(observer_cnt, T, idle_observers, neighbour_cnt, chi_min, chi_prop, zeta, e, freq_bins, max_freq, outlier_threshold, outlier_handling, rel_outlier_score, perturb, random_sampling, input_buffer, distance, seed))

    def fit(self, data, times):
        return _SDOclustream.tpSDOclustream32_fit(self, data, times)

    def fit_predict(self, data, labels, scores, times):
        return _SDOclustream.tpSDOclustream32_fit_predict(self, data, labels, scores, times)

    def observer_count(self):
        return _SDOclustream.tpSDOclustream32_observer_count(self)

    def get_observers(self, data, labels, observations, av_observations, time):
        return _SDOclustream.tpSDOclustream32_get_observers(self, data, labels, observations, av_observations, time)
    __swig_destroy__ = _SDOclustream.delete_tpSDOclustream32

# Register tpSDOclustream32 in _SDOclustream:
_SDOclustream.tpSDOclustream32_swigregister(tpSDOclustream32)

class tpSDOclustream64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, observer_cnt, T, idle_observers, neighbour_cnt, chi_min, chi_prop, zeta, e, freq_bins, max_freq, outlier_threshold, outlier_handling, rel_outlier_score, perturb, random_sampling, input_buffer, distance, seed):
        _SDOclustream.tpSDOclustream64_swiginit(self, _SDOclustream.new_tpSDOclustream64(observer_cnt, T, idle_observers, neighbour_cnt, chi_min, chi_prop, zeta, e, freq_bins, max_freq, outlier_threshold, outlier_handling, rel_outlier_score, perturb, random_sampling, input_buffer, distance, seed))

    def fit(self, data, times):
        return _SDOclustream.tpSDOclustream64_fit(self, data, times)

    def fit_predict(self, data, labels, scores, times):
        return _SDOclustream.tpSDOclustream64_fit_predict(self, data, labels, scores, times)

    def observer_count(self):
        return _SDOclustream.tpSDOclustream64_observer_count(self)

    def get_observers(self, data, labels, observations, av_observations, time):
        return _SDOclustream.tpSDOclustream64_get_observers(self, data, labels, observations, av_observations, time)
    __swig_destroy__ = _SDOclustream.delete_tpSDOclustream64

# Register tpSDOclustream64 in _SDOclustream:
_SDOclustream.tpSDOclustream64_swigregister(tpSDOclustream64)



